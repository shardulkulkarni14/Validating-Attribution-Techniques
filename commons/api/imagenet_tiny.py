# AUTOGENERATED! DO NOT EDIT! File to edit: ../../abid/api_notebooks/tiny_imagenet.ipynb.

# %% auto 0
__all__ = ['imagenet_dir', 'imagenet_tiny_dir', 'classes_json', 'get_imagenet_classes', 'get_random_images']

# %% ../../abid/api_notebooks/tiny_imagenet.ipynb 1
import os
import shutil
import random
from PIL import Image
import numpy as np
import json

# %% ../../abid/api_notebooks/tiny_imagenet.ipynb 2
imagenet_dir = "/data/share/public/imagenet/ILSVRC2012_img_train"
imagenet_tiny_dir = "/project/validating_attribution_techniques/data/imagenet_tiny"
classes_json = "/project/validating_attribution_techniques/data/imagenet_class_index.json"

# %% ../../abid/api_notebooks/tiny_imagenet.ipynb 5
def get_imagenet_classes(classes_json_dir=classes_json):
    """
    Get the location of a json file containing the imagenet label for ImageNet1000 categories
    
    input:
      - classes_json_dir : str
    return:
      - classes : ndarray
        (class labels in string)
    """
    classes = json.load(open(classes_json_dir))
    classes = np.array(list(classes.values()))
    return classes[:, 1]

# %% ../../abid/api_notebooks/tiny_imagenet.ipynb 6
def get_random_images(num_images):
    """
    Get random images from the ImageNet tiny dataset created for the project.
    
    input :
      - num_images : int (Number of images to be returned)
    
    return :
      - image_list : list (List containing images, with len == num_images)
      - label_list : list (List containing the labels for each image returned, in order)
    """
    image_list = []
    label_list = []
    class_dirs = os.listdir(imagenet_tiny_dir)
    
    classes = json.load(open(classes_json))
    classes = np.array(list(classes.values()))
    
    for idx in random.sample(range(len(class_dirs)), num_images):
        class_dir = os.path.join(imagenet_tiny_dir, class_dirs[idx])
        img_files = os.listdir(class_dir)
        rand_img_idx = random.sample(range(len(img_files)), 1)[0]
        img = np.array(Image.open(os.path.join(class_dir, img_files[rand_img_idx])))
        if len(img.shape) < 3:
            img = np.expand_dims(img, -1)
        image_list.append(img)
        class_idx = np.where(classes[:, 0]==class_dirs[idx])[0][0] # idx of the dir code
        label_list.append(class_idx)
    return image_list, label_list
