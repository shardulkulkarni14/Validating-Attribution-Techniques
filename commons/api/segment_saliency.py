# AUTOGENERATED! DO NOT EDIT! File to edit: ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb.

# %% auto 0
__all__ = ['yolo_model', 'plot_polygon', 'pixels_to_polygon', 'polygon_to_pixels', 'generate_saliency_from_polygon',
           'yolo_generate_segmentation_mask']

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 5
import torch
import numpy as np
import cv2
from ultralytics import YOLO

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 12
import matplotlib.pyplot as plt
from PIL import Image

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 14
from segment_anything import SamPredictor, sam_model_registry

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 34
from shapely.geometry import Point, Polygon

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 38
from skimage import measure

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 43
def plot_polygon(axes, polygon: Polygon, x_axis: int, y_axis: int):
    """
    Plots shapely polygon using matplotlib
    
    input :
      - axes : matplotlib axis (Axis to draw on)
      - polygon : shapely polygon (Object to draw)
      - x_axis : int (value to scale the x-axis by)
      - y_axis : int (value to scale the y-axis by)
    """
    y, x = polygon.exterior.xy
    
#     fig, ax = plt.subplots(figsize=(5, 5))
    axes.plot(x, y, color='red', alpha=0.5)
    axes.fill(x, y)
    axes.set_xlim(0, x_axis)
    axes.set_ylim(y_axis, 0)

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 54
from shapely.affinity import scale

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 61
from scipy.signal import convolve2d

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 70
from shapely import simplify

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 79
def pixels_to_polygon(pixels):
    contours = measure.find_contours(pixels, 0.5, fully_connected='high')
    longest_coutour = max(contours, key=len)
    polygon = Polygon(longest_coutour)

    return polygon

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 82
# This thing is slow as hell, screw python and whoever decided to start using python for deep learning.
# Needs to be optimized
def polygon_to_pixels(polygon, height, width):
    """
    Converts a 2D shapely polygon into a numpy array mask {0, 1}
    
    input :
      - polygon : shapely Polygon
      - height : int (height of the desired raster)
      - width : int (width of the desired raster)
    return :
      - array : ndarray (resterized mask)
    """
    # height, width = arr.shape
    array = np.zeros((height, width))
    for y in range(height):
        for x in range(width):
            if polygon.contains(Point(y, x)):
                array[y, x] = 1
    return array

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 85
def generate_saliency_from_polygon(polygon, height, width):
    """
    Generates a rasterized and smoothed saliency map using a polygonal shape,
    through iterative decimation and scaling down.
    
    input :
      - polygon : shapely Polygon
      - height : int (height of the desired raster)
      - width : int (width of the desired raster)
    return :
      - np_mask : ndarray (resterized and smoothed saliency map)
    """
    kernel = np.array([
    [ 45,  78, 128,  78, 45],
    [ 78, 128, 170, 128, 78],
    [128, 170, 255, 170, 128],
    [ 78, 128, 170, 128, 78],
    [ 45,  78, 128,  78, 45]])

    kernel = kernel/kernel.sum()

    num_of_scaling_op = 7
    saliency_value = 1/num_of_scaling_op

    scale_val = 1;
    np_mask = np.zeros((height, width), dtype=float)

    decimation_tolerance = 1
    decimated_poly = simplify(polygon, decimation_tolerance, preserve_topology=False)

    for _ in range(num_of_scaling_op):
        decimated_poly = simplify(decimated_poly, decimation_tolerance, preserve_topology=False)
        scaled_polygon = scale(decimated_poly, xfact=scale_val, yfact=scale_val)
        for y in range(height):
            for x in range(width):
                if scaled_polygon.contains(Point(y, x)):
                    np_mask[y, x] += saliency_value
        scale_val *= 0.86
        decimation_tolerance *= 1.7
    np_mask = convolve2d(np_mask, kernel, mode='full')

    return np_mask

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 90
yolo_model = YOLO('yolov8m-seg.pt')

# %% ../../abid/api_notebooks/ground_truth_saliency_generation.ipynb 91
def yolo_generate_segmentation_mask(image, yolo_model=yolo_model):
    """
    Generates segmentation masks using YOLOv8, and returns the largest segmented area
    
    input :
      - image : ndarray
      - segment_model : func (optional)
        (YOLOv8 model given without api modification)
    return :
      - mask : ndarray (if YOLO model found a mask)
      - None (if a mask cannot be created) 
    """
    results = yolo_model(img_input)
    if results[0].masks != None:
        return np.array(Image.fromarray(results[0].masks.cpu().data[0].numpy()).resize((224, 224)))
    else:
        return results[0].masks
