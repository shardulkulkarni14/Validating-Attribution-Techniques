# AUTOGENERATED! DO NOT EDIT! File to edit: ../../abid/api_notebooks/viz.ipynb.

# %% auto 0
__all__ = ['visualize_saliency_overlay']

# %% ../../abid/api_notebooks/viz.ipynb 1
from PIL import Image
import torch
from torchvision import transforms
import numpy as np
import matplotlib.pyplot as plt

# %% ../../abid/api_notebooks/viz.ipynb 2
def visualize_saliency_overlay(axes, img, mask, probs=None, cat_idx=None, classes=None):
    """
    Visualize the saliency maps on top of an image.
    
    input :
      - axes : matplotlib axis to draw on
      - img : ndarray (Image to be visualized)
      - mask : ndarray (saliency map to be overlaid)
      - probs : ndarray (optional probabilities of the output)
      - cat_idx : int (optional index number into the probs)
      - classes : list (optional classes list to convert cat_idx into string name)
    """
    np_img = np.array(img)
    heatmap = Image.fromarray(mask)
    heatmap = np.array(heatmap.resize((np_img.shape[0], np_img.shape[1])))
    axes.imshow(np_img)
    heatmap = (heatmap / np.max(heatmap)) * 255.0
    axes.imshow(heatmap, cmap='turbo', # seismic, hot, Reds
                alpha=0.5)
    axes.set_ylabel("Segmentation-based Ground Saliency")
    axes.set_xticks([])
    axes.set_xticks([], minor=True)
    axes.set_yticks([])
    axes.set_yticks([], minor=True)
    
    if probs is not None and cat_idx is not None and classes is not None:
        if isinstance(probs, np.ndarray):
            axes.set_title(f"Class: {classes[cat_idx]} ({probs[0, cat_idx].item()*100:.2f}%)")
        elif isinstance(probs, float):
            axes.set_title(f"Class: {classes[cat_idx]} ({probs * 100:.2f}%)")
    
    return heatmap
